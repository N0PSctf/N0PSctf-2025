import logging
import os
import sys
from itertools import product, combinations
from math import gcd
from Crypto.Util.number import *
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Util.number import getPrime, bytes_to_long
from sage.all import ZZ

path = os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(os.path.abspath(__file__)))))
if sys.path[1] != path:
	sys.path.insert(1, path)

from shared import small_roots


def attack(N, a, rho, t=1, k=1, roots_method="groebner"):
	"""
	Solves the ACD problem using the multivariate polynomial approach.
	More information: Galbraith D. S. et al., "Algorithms for the Approximate Common Divisor Problem" (Section 5)
	:param N: N = p * q0
	:param a: the a samples, with ai = p * qi + ri
	:param rho: the bit length of the r values
	:param t: the parameter t (default: 1)
	:param k: the parameter k (default: 1)
	:param roots_method: the method to use to find roots (default: "groebner")
	:return: the secret integer p and a list containing the r values, or None if p could not be found
	"""
	assert len(a) > 0, "At least one a value is required."
	assert t >= k, "t must be greater than or equal to k."

	R = 2 ** rho

	pr = ZZ[tuple(f"x{i}" for i in range(len(a)))]
	x = pr.gens()
	X = [R] * len(x)

	logging.debug("Generating shifts...")

	shifts = []
	for i in product(*[range(t + 1) for _ in x]):
		if sum(i) <= t:
			l = max(k - sum(i), 0)
			fi = N ** l
			for m in range(len(i)):
				fi *= (x[m] - a[m]) ** i[m]

			shifts.append(fi)

	B, monomials = small_roots.create_lattice(pr, shifts, X)
	B = small_roots.reduce_lattice(B)
	polynomials = small_roots.reconstruct_polynomials(B, None, N ** k, monomials, X)
	for roots in small_roots.find_roots(pr, polynomials, method=roots_method):
		r = [roots[xi] for xi in x]
		if all(-R < ri < R for ri in r):
			return int(gcd(N, a[0] - r[0])), r

# Solution

# From the Polish function
rho = 512 >> 1
# From the Information part
pkey = 65800258621857924448748138379873468444806515217277653309256967519631349145192800886750623515746201718940735868330847349213475907188777128695919699381288863431363032815029635054773088896494775777925741302054636590573806823362203291793757741049483971116524308377406107022106721289683453727324224694722799500817
encrypted_flag = ((43092689054564354460116367987058452509000066537718113838193548245317937447579641198017316263742479429798093195901204303384933401414227418279945299727643810050260893214197454308987699943219991729797851389214329969448719798873685430729022169490563077948305401313333466103921542991299765056891990448964706824578, 42648727939854843061777752397050562263006755567834065443346208115785459026736032742474325109714171807609107682981632684073519834985133723062501213528128841050671023449781311851287566156053089774661414440398036394948447408664689479064290466420438700476450715199146890889763796169294561437600307758501533718774), 38602524277079789833507296994261582873783817689156951330190397398794180285494971415089720016265918585549173046685925137623114943474534352115856754007210972561439753168492259124273871901830495135236879683250973638232196500204994244365849828664005672498098991534088768789393245463984943234888161830981187897383)

# Get From Polish output for l = 16, the probability of getting 4 consequnece i is almost 1 for l = 16!
PLS = [
107178967146340214087031743763025967448924537356059089833927226757334151797988041515467777301857153021719676342059211497888233245013517108883438799738526099815125954684611867509592446688891795856204482644440666713678864690513013873046100339856677083933806466104593925851693325185798935816989316472876131169071,
91010968342494715134746257028883506695087927245380774875568583214953434214601890422609653701234907704717688731643915226040628452370704799730340182881173896955844595844883135864492610762765512021998345411999803743106824807671704190366969393484071137280156038674313766659727918540466883231557819626767187017943,
71097179600453903617590570681919900722988185496714510795767614492619864579927824913884518773220882984647443776489697772930587736462255142861256687236418799368288554450790163372738683656596591146100031769734739023591896311613454148305475687305043880058353894862078928085488092432697878705104102525843660428079,
80518093875212387706233220490478071706193539780502314306561774530933144717316835777033764362712821231519696726330734030464291875422905670343110825847343940311900943533185559154002155242367200703923654878611393705869055746282339857117117916794934986081319132763233230025020863521541627713101579598426880204448,
112317038335411646686794470066494211549619875653543792329295361164524238116089556091193624395266172226491500883926479757639720392909548675697276481708899929977575693976264076497198729025956406238134273718301746257630055356712957312380330154038751050246062939546599361139389172660759893354943833120698872989848,
114518258288693819411075437444776059122082135135022367565249312391220946805721215381318884345310337713393676758985743021894634212085086342429687345714805431576395547187743054234680702970455046919210956576245492630175235361197562719445087255209267488007405483128130738028935059340746353395995826575376528434456,
50111091585631717341170821874354191047665889171380152669190316751804637439161147898953030535552799510473956384315576089236376088890040345005320144236496965584178431640378737842944777192338923730446067255444649478012871760472810262097317259207112198989136511176577589163334386715875782323277051146848374113080,
105375144125768946564383870600421109924673646224907287482036953799292470295265409951228020247674596086977480576118377385024658531360268954296074770692259170999538314820343694633278124591600313429392886263092150889635576826830076560136547027989317047163620592843939771794759396000153611690986085427208914821781,
81184331071145942019025010549438421309434955268282673448055200038629457981955937258311331814255676259755649165513803524276595738776649145956228526890200971192808214275821535987924855169913163307438985408696468509274966643317247089847750349168469124804777923429684028000641597025331060602663582463115081842388,
97557659047514820394423801772513492521501295635849273556933034521706642499245666736350202477125269383632874712674986514037066443724809085483326089171519287296972744653777496798085831396504981622802865723465495891560935267214357310762184299671085031889368453622152616489389700180733058988295061000178937400184,
90847006978039087108586864679559822414362803258719047882006494116397593047655775632162965331224282491424048460117960826409544723265451262103115476491854094220550028400562416424339430456640040997334766531547942758308527855838773267206920634600155332369631302650024022050767511935882176239868275631551941445682,
84695079526878800154047865433921562183957217516484033943574024800074587794237069573100213454981905109064618538322189504579129932898603833124057561270523214377267081951985756407835456135993913566351877278020121924640293545056695631848041557008795640017066873942458458147162174817838150802649701566419265348750,
54514653011146548640894522079644573572643651368199142973599039661990783537535988189871917722053066606965926798271789415107757702539646586098244006764995511668228286093349225525527797660036274813333748861842339572050453494334906022145731089996475061011055597842260569313235399530295946662112324725067003145873,
101955455003166728184355379345945007241870405682592460157525169712840365830559024080719855071783252003290528284758961526915381799431671576291058614113802411895876101590718861780395709213742980599856897253208849623790364807320658855228784585038798501254202633390671667447061440155357321755344886453786510234426,
109792785504231237320374862859758076416779650161569164002631156478342929681950564898405836810118193160775288953174301270839731627821944219962502222124437148747474298093227971949539090137850684216530259023470003584055164419255126285665331509828093779150513004966194158785355499744688239825343093861561850167014,
82610628403925275932064134369306776989200161383458332851611715503727594168901213109037955555405799934515412065972979451826328188244522376326732060469540329695789182526876282207076784028047922475086497808950117976111084104817145989962097742909169220455877809327050494576083312170027098511056034902697233184123
]

# The decryption function
def decrypt(enc, skey):
	p, q = skey
	c, f = enc
	c1, c2 = c
	n = p * q
	d = inverse(65537, (p - 1) * (q - 1))
	a = pow(f, d, n)
	assert (c1**2 - a**2 * c2**2) % n == 1
	c = pow(c1 - a * c2, d, n)
	m = (inverse(c, n) - c) * inverse(2 * a, n) % n
	return m

for A in list(combinations(PLS, 4)):
	# Factor the Modulus
	p = attack(pkey, A, rho, t=1, k=1, roots_method="groebner")
	if p != None:
		if p[0] != 1:
			print(p)
			p = p[0]
			q = pkey // p
			phi = (p - 1) * (q - 1)
			d = inverse(65537, phi)
			print(f'p = {p}')
			print(f'q = {q}')
			assert p * q == pkey
			skey = (p, q)
			flag = decrypt(encrypted_flag, skey)
			print(f'flag = {long_to_bytes(flag)}')
			break