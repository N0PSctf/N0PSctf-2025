#!/usr/bin/env sage

from Crypto.Util.number import *

# The method with high precision to find the root of given function:

def halley(f, x0, prec):
	fp(x) = diff(f(x), x)
	fpp(x) = diff(f(x), x, 2)
	for _ in range(20):
		x0 = n(x0 - 2 * f(x0)*fp(x0)/(2*fp(x0)^2 - f(x0)*fpp(x0)), digits = prec)
	return x0

# We can conclude that the sequence converges to l = R((x0**3 * y0**4) ** (1/7))

prec = 400
R = RealField(prec)

# The input from server, it changes in each connection, so you should change it!
y = R(0.324139572067166274454700565006492515453031733556944482058746584266315915126200141962529428991600219673984890250223991645141914765938386528777390839646128153797274900172332915832123004212519908954933634307429021375962414928439934229360948627272749487847602360656343887680490364519883934438626933592843936780479155778625992021024541587675267269827416975589752535329834095509938517708970890323)
# Get l from the server after ~ 400 iterations
l = R(0.2798370212298224369684872811905111026034192686313000993309542687878422151337877639894077623243550374591541865524696921036267055392815484624982526826343342131419444916638961514357408969744400926946246102280982709028482479646012843742333011129744607716969479114565784181174425272659070185276199634690747191970391275938960112685089115743142089181755208064551128287351794095335344544101747810618780903616)

# Define the function that we want to find the root
f(x) = (x**3 * y**4) ** (1/7) - l

# Guess the root just with 1 precision
x0 = R(0.7)
# We know that the `x0` is float with 398 numerical digits
x = int(str(halley(f, x0, prec))[2:398])

flag = long_to_bytes(x)
print(flag)